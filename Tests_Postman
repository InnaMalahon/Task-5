// Testing response
pm.test("Status code is 200", function() {
    pm.response.to.have.status(200);
})

pm.test("Status code is 200 or 201", function () {
    pm.expect(pm.response.code).to.be.oneOf([200, 201]);
})

pm.test("Status code name has string Created", function () {
    pm.response.to.have.status("Created");
});

pm.test("Response time is less 200ms", function() {
    pm.expect(pm.response.responseTime).to.be.below(200);
})

pm.test("Response time is less 500ms", function() {
    pm.expect(pm.response.responseTime).to.be.below(500);
})

pm.test("Response is json", function () {
    pm.response.to.be.json;
});

pm.test("Size is less 1000 B", function() {
    pm.expect(pm.response.responseSize).to.be.below(1000);
});

// Testing json data
pm.test("userId is 333", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData['args']['userId']).to.eql("333");
});

pm.test("x-forwarded-proto is https", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData['headers']['x-forwarded-proto']).to.eql("https");
});

// Testing headers
pm.test("Content-Type header is present", function() {
  pm.response.to.have.header("Content-Type");
});

pm.test("Connection header is present", function() {
  pm.response.to.have.header("Connection");
});

pm.test("Location header is present", function() {
  pm.response.to.have.header("Location");
});

pm.test('Response should redirect to secure URL', function() {
    pm.response.to.have.header(
      'Location',
      'https://' + pm.environment.get('host') + '/'
    );
});

pm.test("Content-Type header is application/json; charset=utf-8", function () {
  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');
});

pm.test('Service worker file should exist', function () {
    pm.expect(pm.response.headers.get('Content-Type').split(';'))
      .to.include('application/json');
});

pm.test("Connection is keep-alive", function () {
    pm.response.to.be.header("Connection", "keep-alive"); 
});

// Testing cookies
pm.test("Cookie sails.sid is present", () => {
  pm.expect(pm.cookies.has('sails.sid')).to.be.true;
});
